#!/usr/bin/env node

const fs = require('fs');
const kConst = require('kevoree-const');
const chalk = require('chalk');
const inquirer = require('inquirer');
const kApi = require('kevoree-registry-client');
const config = require('tiny-conf');

require('tiny-conf-plugin-file')(config, kConst.CONFIG_PATH);

new Promise(function (resolve, reject) {
  fs.lstat(kConst.CONFIG_PATH, function (err, stats) {
    if (err) {
      reject(err);
    } else {
      resolve(stats.isFile());
    }
  });
}).then(function (alreadyExists) {
  if (alreadyExists) {
    if (config.get('user')) {
      console.log(chalk.yellow('A user is already registered at:') + ' ' + kConst.CONFIG_PATH);
      return inquirer.prompt([
        {
          name: 'overwrite',
          type: 'confirm',
          message: 'Overwrite',
          default: false
        }
      ]);
    }
  }
  // default
  return { overwrite: true };
}, () => {
  console.log(chalk.yellow('No config file found at:') + ' ' + kConst.CONFIG_PATH);
  console.log();
  console.log('You should run: ' + chalk.blue('$ kevoree init'));
  process.exit(1);
}).then(function (answer) {
  if (answer.overwrite) {
    const questions = [
      {
        name: 'login',
        type: 'string',
        default: config.get('user.login'),
        message: 'login',
        validate: function (val) {
          if (val.match(/^[a-z0-9]+$/)) {
            return true;
          }
          return 'Login must match ' + /^[a-z0-9]+$/;
        }
      },
      {
        name: 'password',
        type: 'password',
        message: 'password',
        validate: function (val) {
          if (val.length >= 6 && val.length <= 100) {
            return true;
          }
          return 'Password must be at least 6 characters';
        }
      }
    ];
    return inquirer.prompt(questions).then(function (answers) {
      return kApi.auth.login(answers.login, answers.password)
        .catch((err) => {
          if (process.env.NODE_ENV === 'development') {
            console.error(chalk.yellow('Login failed'));
            console.error(err.stack);
          } else {
            console.error(chalk.yellow('Login failed') + ' (' + err.message + ')');
          }
          process.exit(1);
        });
    }).then(function () {
      console.log(chalk.green('OK'));

      return new Promise(function (resolve, reject) {
        const confSrc = JSON.stringify(config.get(), null, 2);
        fs.writeFile(kConst.CONFIG_PATH, confSrc, {
          mode: parseInt('0600', 8)
        }, function (err) {
          if (err) {
            reject(err);
          } else {
            resolve(true);
          }
        });
      });
    });
  }
}).then(function (modified) {
  console.log();
  if (modified) {
    console.log('Config written at: ' + chalk.gray(kConst.CONFIG_PATH));
  } else {
    console.log(chalk.green('No changes'));
  }
}).catch(function (err) {
  console.log(chalk.red('Something went wrong :/'));
  console.log(err.stack);
  process.exit(1);
});
