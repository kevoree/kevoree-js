#!/usr/bin/env node

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', (err) => {
  throw err;
});

const INSTANCE_NAME = /^([a-z][a-zA-Z0-9_]*)|(%%[\w]+%%)|(%[\w]+%)$/;

const os = require('os');
const fs = require('fs');
const path = require('path');
const commander = require('commander');
const config = require('tiny-conf');
const kConst = require('kevoree-const');
const kLibrary = require('kevoree-library');
const NPMResolver = require('kevoree-resolvers').NPMResolver;
const KevScript = require('kevoree-kevscript');
const mkdirp = require('mkdirp');
const NodeJSRuntime = require('../lib/NodeJSRuntime');
const loggerFactory = require('kevoree-logger');

const log = loggerFactory.create('Runtime');

function validateName(val) {
  const match = INSTANCE_NAME.exec(val);
  if (match) {
    return match[0];
  } else {
    log.error('Invalid name \'' + val + '\' (must comply with ' + INSTANCE_NAME + ')');
    process.exit(1);
  }
}

function validatePort(val) {
  const match = /^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$/.exec(val);
  if (match) {
    return match[0];
  } else {
    log.error('Invalid port value \'' + val + '\'');
    process.exit(1);
  }
}

const ctxVars = {};

function aggregateCtxVars(arg) {
  const splitted = arg.split('=');
  const key = splitted[0];
  const val = splitted[1];
  ctxVars[key] = val;
}

fs.lstat(kConst.CONFIG_PATH, (err, stats) => {
  if (err || !stats.isFile()) {
    log.error('Unable to find Kevoree\'s config file at:' + kConst.CONFIG_PATH);
    process.exit(1);
  } else {
    commander
      .option('-n --name <value>', 'Name of this runtime node platform (defaults to "node0")', validateName, 'node0')
      .option('-g --groupName <value>', 'Name of the default group (defaults to "sync")', validateName, 'sync')
      .option('-G --groupPort <value>', 'Value of the default group port (defaults to 9000)', validatePort, 9000)
      .option('-m --model [value]', 'A model used to bootstrap the runtime (can be a .kevs or .json)')
      .option('--ctxVar <key=value>', 'Context variables to use in the KevScript if any (eg. --ctxVar key=value --ctxVar key2=value2)', aggregateCtxVars)
      .option('-p --modules-path <value>', 'Path to the cache folder where modules will be installed (defaults to "' + kConst.GLOBAL_PATH + '")', kConst.GLOBAL_PATH)
      .option('-o --offline', 'Offline mode merges cached modules as context model')
      .option('--skipIntegrityCheck', 'Disable npm resolver integrity check (DEV only)')
      .allowUnknownOption()
      .parse(process.argv);

    require('tiny-conf-plugin-file')(config, kConst.CONFIG_PATH);
    require('tiny-conf-plugin-argv')(config);

    let cache = config.get('cache');
    if (!cache) {
      cache = {};
      config.set('cache', cache);
    }
    if (!cache.root) {
      cache.root = path.join(kConst.GLOBAL_PATH, 'tdefs');
    }
    if (!cache.ttl) {
      cache.ttl = 1000 * 60 * 60 * 24; // 24 hours
    }

    const logLevel = config.get('log.level');
    if (logLevel) {
      log.setLevel(logLevel);
    }

    mkdirp(commander.modulesPath, (err) => {
      if (err) {
        throw err;
      } else {
        const factory = new kLibrary.factory.DefaultKevoreeFactory();
        const loader = factory.createJSONLoader();

        const ctxModel = factory.createContainerRoot().withGenerated_KMF_ID(0);
        factory.root(ctxModel);

        if (commander.offline) {
          config.set('offline', true);
          log.info('Loading cached modules for offline mode...');
          const cachedModules = [];
          try {
            const rootModulesPath = path.resolve(commander.modulesPath, 'node_modules');
            const dirs = fs.readdirSync(rootModulesPath);
            const compare = factory.createModelCompare();
            dirs.forEach((dir) => {
              let kevlib, modelStr;
              try {
                kevlib = path.resolve(rootModulesPath, dir, 'kevlib.json');
                modelStr = fs.readFileSync(kevlib, 'utf8');
              } catch (ignore) { /* noop */ }
              if (modelStr) {
                const dirModel = loader.loadModelFromString(modelStr).get(0);
                compare.merge(ctxModel, dirModel).applyOn(ctxModel);
                cachedModules.push(path.basename(path.join(kevlib, '..')));
              }
            });
          } catch (err) {
            if (err.code !== 'ENOENT') {
              throw err;
            }
          }
          log.info('Offline modules merged: ' + cachedModules.join(', '));
        }

        log.info('Runtime', `Kevoree NodeJS [PID:${process.pid}@${os.hostname()}]`);
        const kevsLogger = loggerFactory.create('KevScript');
        const rootResolver = KevScript.Resolvers.tagResolverFactory(kevsLogger,
          KevScript.Resolvers.modelResolverFactory(kevsLogger,
            KevScript.Resolvers.registryResolverFactory(kevsLogger)));
        const kevs = new KevScript(kevsLogger, { resolver: rootResolver });
        const resolver = new NPMResolver(commander.modulesPath, loggerFactory.create('NPMResolver'), commander.skipIntegrityCheck);
        const runtime = new NodeJSRuntime(log, resolver, kevs);

        runtime.on('stopped', () => {
          process.exit(0);
        });

        runtime.on('error', (err) => {
          log.error(err.stack);
        });

        // read the model to deploy
        if (commander.model && commander.model.length > 0) {
          const ext = path.extname(commander.model);
          if ((ext === '.kevs') || (ext === '.json')) {
            // use model as bootstrap
            fs.readFile(commander.model, 'utf8', (err, modelSrc) => {
              if (err) {
                log.error(err.message);
                process.exit(1);
              } else {
                if (path.extname(commander.model) === '.kevs') {
                  // parse model as KevScript
                  kevs.parse(modelSrc, ctxModel, ctxVars)
                    .then(({ model }) => {
                      const keys = Object.keys(ctxVars);
                      if (keys.length > 0) {
                        let strCtxVars = '';
                        keys.forEach((key, i) => {
                          strCtxVars += key + '=' + ctxVars[key];
                          if (i < keys.length - 1) {
                            strCtxVars += ', ';
                          }
                        });
                        log.debug('KevScript context variables: ' + strCtxVars);
                      }
                      // start kevoree core
                      let nodeName = commander.name;
                      if (nodeName.startsWith('%%') && nodeName.endsWith('%%')) {
                        const genCtxVarVal = ctxVars[nodeName.substring(2, nodeName.length - 2)];
                        if (!genCtxVarVal) {
                          log.error('There is no value for generated context variable ' + nodeName);
                          process.exit(1);
                        } else {
                          nodeName = genCtxVarVal;
                        }
                      } else if (nodeName.startsWith('%') && nodeName.endsWith('%')) {
                        const ctxVarVal = ctxVars[nodeName.substring(1, nodeName.length - 1)];
                        if (!ctxVarVal) {
                          log.error('There is no value for context variable ' + nodeName);
                          process.exit(1);
                        } else {
                          nodeName = ctxVarVal;
                        }
                      }

                      // start kevoree core
                      runtime.start(nodeName, commander.groupName, commander.groupPort, logLevel);

                      // deploy the model
                      runtime.deploy(model);
                    })
                    .catch((err) => {
                      log.error(err.stack);
                      log.error('Platform shut down.');
                      process.exit(1);
                    });
                } else {
                  // parse model as JSON
                  const modelPath = path.resolve(commander.model);
                  let model;
                  try {
                    const modelStr = fs.readFileSync(modelPath, 'utf8');
                    model = loader.loadModelFromString(modelStr).get(0);
                  } catch (err) {
                    log.error('Unable to load JSON model:');
                    log.error(err.stack);
                    process.exit(1);
                  }

                  // start kevoree core
                  runtime.start(commander.name, commander.groupName, commander.groupPort, logLevel);
                  // deploy the model
                  runtime.deploy(model);
                }
              }
            });
          } else {
            log.error('Only .kevs or .json model can be used for bootstrap.');
            process.exit(1);
          }
        } else {
          // start kevoree core
          runtime.start(commander.name, commander.groupName, commander.groupPort, logLevel);
          // deploy null model => it will create a default one
          runtime.deploy();
        }
      }
    });
  }
});
