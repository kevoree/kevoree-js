#!/usr/bin/env node

const fs = require('fs-extra');
const path = require('path');
const kConst = require('kevoree-const');
const ora = require('ora');
const chalk = require('chalk');
const inquirer = require('inquirer');
const validUrl = require('valid-url');
const url = require('url');
const printConfig = require('../lib/printConfig');

const DEFAULT_MODULES_PATH = path.join(kConst.CONFIG_PATH, '..');
const CONF_FILE_PATH = path.join(DEFAULT_MODULES_PATH, 'config.json');

const spinner = ora('Initializing Kevoree config...').start();

new Promise((resolve, reject) => {
  fs.ensureDir(DEFAULT_MODULES_PATH, (err) => {
    if (err) {
      reject(err);
    } else {
      resolve();
    }
  });
}).then(() => {
  return new Promise((resolve) => {
    fs.lstat(CONF_FILE_PATH, (err, stats) => {
      if (err) {
        resolve(false);
      } else {
        resolve(stats.isFile());
      }
    });
  });
}).then((alreadyExists) => {
  spinner.stop();
  if (alreadyExists) {
    console.log(chalk.yellow('Warning:'), 'there is already a config file at "' + CONF_FILE_PATH + '"');
    printConfig(require(CONF_FILE_PATH));
    return inquirer.prompt([
      {
        name: 'overwrite',
        type: 'confirm',
        message: 'Overwrite',
        default: false
      }
    ]);
  } else {
    return {
      overwrite: true
    };
  }
}).then((answer) => {
  if (answer.overwrite) {
    return inquirer.prompt([
      {
        name: 'registry',
        type: 'string',
        message: 'Kevoree Registry URL',
        default: 'https://registry.kevoree.org',
        validate: (val) => {
          if (validUrl.isUri(val)) {
            return true;
          }
          return 'Invalid URI';
        }
      },
      {
        name: 'clientSecret',
        type: 'string',
        default: 'kevoree_registryapp_secret',
        message: 'Kevoree registry OAuth client_secret'
      },
      {
        name: 'clientId',
        type: 'string',
        default: 'kevoree_registryapp',
        message: 'Kevoree registry OAuth client_id'
      }
    ]).then((answers) => {
      const parsedUrl = url.parse(answers.registry);
      let confFile;
      try {
        confFile = require(CONF_FILE_PATH);
      } catch (ignore) {
        confFile = {};
      }
      const conf = JSON.stringify(
        Object.assign(
          confFile, {
            registry: {
              host: parsedUrl.hostname,
              port: parsedUrl.port ? parsedUrl.port : 443,
              ssl: parsedUrl.protocol === 'https:',
              oauth: {
                client_secret: answers.clientSecret,
                client_id: answers.clientId
              }
            }
          }
        ), null, 2);

      return new Promise((resolve, reject) => {
        fs.writeFile(CONF_FILE_PATH, conf, {
          mode: parseInt('0600', 8)
        }, (err) => {
          if (err) {
            reject(err);
          } else {
            resolve(true);
          }
        });
      });
    });
  }
}).then((modified) => {
  console.log();
  if (modified) {
    console.log('Config written at: ' + chalk.gray(CONF_FILE_PATH));
  } else {
    console.log(chalk.green('No changes'));
  }
}).catch((err) => {
  spinner.stop(); // (re-)stop spinner (ie. in case of error it will stop it)
  console.log(chalk.red('Something went wrong :/'));
  console.log(err.stack);
  process.exit(1);
});
