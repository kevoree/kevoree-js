#!/usr/bin/env node
const fs = require('fs-extra');
const path = require('path');
const chalk = require('chalk');
const inquirer = require('inquirer');
const hbsTemplates = require('../lib/hbs-templates');
const validateModuleName = require("validate-npm-package-name");


const dir = process.argv[2];
if (!dir) {
  console.log('You must specify a project directory:');
  console.log('  ' + chalk.cyan('kevoree create') + ' ' + chalk.green('<project-directory>'));
  console.log('');
  console.log('For example:');
  console.log('  ' + chalk.cyan('kevoree create') + ' ' + chalk.green('my-component'));
} else {
  const questions = [
    {
      name: 'moduleName',
      type: 'input',
      message: 'Module name?',
      validate: (value) => {
        const result = validateModuleName(value);
        return result.errors ? result.errors[0] : true;
      }
    },
    {
      name: 'namespace',
      type: 'input',
      message: 'Namespace?',
      validate: (value) => {
        const result = value.match(/^[a-z0-9]+$/);
        return result ? true : 'namespace can only contain alphanumeric lower-cased caracters (eg. /^[a-z0-9]+$/)';
      }
    },
    {
      name: 'type',
      type: 'list',
      choices: ['component', 'channel', 'group', 'node'],
      message: 'What kind of type do you want to create?'
    },
    {
      name: 'name',
      type: 'input',
      message: (answers) => `What is the name of your ${answers.type}?`
    },
    {
      name: 'description',
      type: 'input',
      message: (answers) => `Describe your ${answers.type} (HTML tags are supported)?`
    },
    {
      name: 'browserCompat',
      type: 'confirm',
      default: true,
      message: (answers) => `Will your ${answers.type} be used in a Kevoree browser runtime?`
    }
  ];

  console.log('Creating project directory: ' + chalk.cyan(path.resolve(dir)));
  fs.ensureDir(path.resolve(dir), (err) => {
    if (err) {
      console.error(chalk.red('Unable to create project directory:'));
      console.error(err.stack);
      process.exit(1);
    } else {
      inquirer.prompt(questions)
      .then((answers) => {
        console.log();
        console.log('Generating files:');
        console.log();
        hbsTemplates.write(answers.type, path.join(dir, 'lib', answers.name + '.js'), answers);
        if (answers.browserCompat) {
          hbsTemplates.write('package-browser', path.join(dir, 'package.json'), answers);
          if (answers.type === 'component') {
            hbsTemplates.write('browser-ui', path.join(dir, 'lib', 'browser.js'), answers);
            hbsTemplates.write('component-ui', path.join(dir, 'lib', 'browser', answers.name + 'UI.js'), answers);
          } else {
            hbsTemplates.write('browser', path.join(dir, 'lib', 'browser.js'), answers);
          }
        } else {
          hbsTemplates.write('package', path.join(dir, 'package.json'), answers);
        }
        hbsTemplates.write('test', path.join(dir, 'test', 'main.js'), answers);
        hbsTemplates.write('test-eslintrc', path.join(dir, 'test', '.eslintrc'), answers);
        hbsTemplates.write('main', path.join(dir, 'kevs', 'main.kevs'), answers);
        hbsTemplates.write('eslintrc', path.join(dir, '.eslintrc'));
        console.log();
        console.log(chalk.green('Done.'));
        console.log();
        console.log('Your project has been successfully generated.');
        console.log('Just run ' + chalk.cyan('npm install') + ' in ' + chalk.green(path.resolve(dir)) + ' to get started :)');
        console.log();
        console.log('Bye.');
      })
      .catch((err) => {
        console.error(chalk.red('Something went wrong while generating project:'));
        console.error(err.stack);
        process.exit(1);
      });
    }
  });
}
