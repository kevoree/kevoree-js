add node0 : JavaNode/LATEST/LATEST
add sync : WSGroup/LATEST/LATEST
attach node0 sync

set sync.onConnect = "Hello !
This is a try to create a big script using standard Kevoree-library coming from https://github.com/kevoree/kevoree-library
So I try to put lot of information in a String which be parsed by KevScript as a RealString with multiple lines,
some special character like ù%*é=^``~&°.:!§,?/#çà][-|

This test is use to test waxeye and check if our grammar avoid the potential stackoverflow coming from to many recursion.
To avoid it, we write RealString as a set of rules which are the following:

Escaped1      <- ['] | '\\'
Escaped2      <- [\"] | '\\'

NotEscaped1Line <- +(!Escaped1 !eol .)
NotEscaped2Line <- +(!Escaped2 !eol .)

RealString  <- :[\"] *( (:'\\' Escaped2) | NotEscaped2Line | (!Escaped2 eol)) :[\"] | :['] *( (:'\\' Escaped1) | NotEscaped1Line | (!Escaped1 eol)) :[']

Waxeye is a parser generator based on parsing expression grammars (PEGs).
It supports C, Java, Javascript, Python, Ruby and Scheme.

For more information about waxeye: https://github.com/orlandohill/waxeye

The following lines are copy/paste from the previous one...
Hello !
This is a try to create a big script using standard Kevoree-library coming from https://github.com/kevoree/kevoree-library
So I try to put lot of information in a String which be parsed by KevScript as a RealString with multiple lines,
some special character like ù%*é=^``~&°.:!§,?/#çà][-|

This test is use to test waxeye and check if our grammar avoid the potential stackoverflow coming from to many recursion.
To avoid it, we write RealString as a set of rules which are the following:

Escaped1      <- ['] | '\\'
Escaped2      <- [\"] | '\\'

NotEscaped1Line <- +(!Escaped1 !eol .)
NotEscaped2Line <- +(!Escaped2 !eol .)

RealString  <- :[\"] *( (:'\\' Escaped2) | NotEscaped2Line | (!Escaped2 eol)) :[\"] | :['] *( (:'\\' Escaped1) | NotEscaped1Line | (!Escaped1 eol)) :[']

Waxeye is a parser generator based on parsing expression grammars (PEGs).
It supports C, Java, Javascript, Python, Ruby and Scheme.

For more information about waxeye: https://github.com/orlandohill/waxeye
Hello !
This is a try to create a big script using standard Kevoree-library coming from https://github.com/kevoree/kevoree-library
So I try to put lot of information in a String which be parsed by KevScript as a RealString with multiple lines,
some special character like ù%*é=^``~&°.:!§,?/#çà][-|

This test is use to test waxeye and check if our grammar avoid the potential stackoverflow coming from to many recursion.
To avoid it, we write RealString as a set of rules which are the following:

Escaped1      <- ['] | '\\'
Escaped2      <- [\"] | '\\'

NotEscaped1Line <- +(!Escaped1 !eol .)
NotEscaped2Line <- +(!Escaped2 !eol .)

RealString  <- :[\"] *( (:'\\' Escaped2) | NotEscaped2Line | (!Escaped2 eol)) :[\"] | :['] *( (:'\\' Escaped1) | NotEscaped1Line | (!Escaped1 eol)) :[']

Waxeye is a parser generator based on parsing expression grammars (PEGs).
It supports C, Java, Javascript, Python, Ruby and Scheme.

For more information about waxeye: https://github.com/orlandohill/waxeye
Hello !
This is a try to create a big script using standard Kevoree-library coming from https://github.com/kevoree/kevoree-library
So I try to put lot of information in a String which be parsed by KevScript as a RealString with multiple lines,
some special character like ù%*é=^``~&°.:!§,?/#çà][-|

This test is use to test waxeye and check if our grammar avoid the potential stackoverflow coming from to many recursion.
To avoid it, we write RealString as a set of rules which are the following:

Escaped1      <- ['] | '\\'
Escaped2      <- [\"] | '\\'

NotEscaped1Line <- +(!Escaped1 !eol .)
NotEscaped2Line <- +(!Escaped2 !eol .)

RealString  <- :[\"] *( (:'\\' Escaped2) | NotEscaped2Line | (!Escaped2 eol)) :[\"] | :['] *( (:'\\' Escaped1) | NotEscaped1Line | (!Escaped1 eol)) :[']

Waxeye is a parser generator based on parsing expression grammars (PEGs).
It supports C, Java, Javascript, Python, Ruby and Scheme.

For more information about waxeye: https://github.com/orlandohill/waxeye
"
add node0.ticker : Ticker/LATEST/LATEST
add hub : LocalChannel/LATEST/LATEST

bind node0.ticker.tick hub

set node0.ticker.period = "3000"
