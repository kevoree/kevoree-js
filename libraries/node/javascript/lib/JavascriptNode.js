const AbstractNode = require('kevoree-entities/lib/AbstractNode');
const AdaptationEngine = require('./AdaptationEngine');

const JavascriptNode = AbstractNode.extend({
  toString: 'JavascriptNode',
  tdef_version: 1,

  dic_logLevel: {
    defaultValue: 'INFO',
    optional: false
  },

  construct: function () {
    this.adaptationEngine = new AdaptationEngine(this);
  },

  start: function (done) {
    this.adaptationEngine.modelObjMapper.addEntry(this.getPath(), this);
    this.dictionary.on('logLevel', this.updateLogLevel);
    const logLevel = this.dictionary.getString('logLevel', this.dic_logLevel.defaultValue);
    this.updateLogLevel(logLevel, this.dic_logLevel.defaultValue);
    this.log.debug('started');
    done();
  },

  stop: function (done) {
    this.adaptationEngine.modelObjMapper.removeEntry(this.getPath());
    this.dictionary.off('logLevel', this.updateLogLevel);
    this.log.debug('stopped');
    done();
  },

  /**
   * Called when the host node has to start an hosted subNode
   * @param node the hosted subNode
   * @param done
   */
  startSubNode: function (node, done) {
    this.log.warn('startSubNode(): not implemented yet');
    done();
  },

  /**
   * Called when the host node has to stop an hosted subNode
   * @param node the hosted subNode
   * @param done
   */
  stopSubNode: function (node, done) {
    this.log.warn('stopSubNode(): not implemented yet');
    done();
  },

  /**
   * Called when the host node has to destroy an hosted subNode instance
   * @param node the hosted subNode
   * @param done
   */
  destroySubNode: function (node, done) {
    this.log.warn('destroySubNode(): not implemented yet');
    done();
  },

  /**
   * Called when the host node has to remove an hosted subNode instance
   * @param node the hosted subNode
   * @param done
   */
  removeSubNode: function (node, done) {
    this.log.warn('removeSubNode(): not implemented yet');
    done();
  },

  /**
   * Process traces in order to do the adaptation logic on the current node
   * @param diffSeq diff traces generated by comparing current KevoreeCore model and given model
   * @param targetModel toDeploy model used by KevoreeCore to generate the trace
   * @returns {Array}
   */
  processTraces: function (diffSeq, targetModel) {
    return this.adaptationEngine.processTraces(diffSeq, targetModel);
  },

  updateLogLevel: function (newLevel, oldLevel) {
    this.log.info('Logger level changed from ' + oldLevel + ' to ' + newLevel);
    this.log.transports.console.level = newLevel.toLowerCase().trim();
  }
});

module.exports = JavascriptNode;
